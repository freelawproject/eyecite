name: Lint

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.0
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Activate venv
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: Black Code Formatter
        uses: psf/black@stable

      - name: Run flake8
        uses: suo/flake8-github-action@releases/v1
        with:
          checkName: "lint"   # NOTE: this needs to be the same as the job name
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: isort Import Sorter
        uses: isort/isort-action@v0.1.0

      - name: pylint Error Checker
        run: pylint --fail-under 9 -f colorized microscope

      - name: mypy Static Type Checker
        run: mypy .

  lint-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1.1.0
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Activate venv
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: pylint Generate Report
        run: >
          pylint --exit-zero --load-plugins=pylint_json2html -f jsonextended microscope |
          pylint-json2html -f jsonextended -o pylint-report.html

      - name: Upload report
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: pylint report
          path: pylint-report.html
