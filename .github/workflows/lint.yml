name: Lint

on:
  push:
    branches-ignore:
      - 'artifacts'
  pull_request:
    branches-ignore:
      - 'artifacts'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          version: 1.2.0rc2

      - name: Install hyperscan
        run: sudo apt-get install libhyperscan-dev

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock')}}-v20210507

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Activate venv
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: Black Code Formatter
        uses: psf/black@stable

      - name: Run flake8
        uses: py-actions/flake8@v1

      - name: isort Import Sorter
        uses: isort/isort-action@v0.1.0

      - name: pylint Error Checker
        run: pylint --fail-under 9 -f colorized eyecite

      - name: mypy Static Type Checker
        run: mypy .

  lint-report:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2-beta
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1.3.3
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          version: 1.2.0rc2

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock')}}-v20210507

      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Activate venv
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: pylint Generate Report
        run: >
          pylint --exit-zero --load-plugins=pylint_json2html -f json eyecite |
          pylint-json2html -f json -o pylint-report.html

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: pylint report
          path: pylint-report.html
